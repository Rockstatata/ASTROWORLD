import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Sparkles, 
  TrendingUp, 
  Users, 
  BookOpen, 
  Lightbulb,
  RefreshCw,
  ChevronRight,
  Star
} from 'lucide-react';
import { useExplorePapers, useMySavedPapers } from '../../hooks/useExplore';

interface AIRecommendationProps {
  className?: string;
}

interface TrendingTopic {
  name: string;
  count: number;
  growth: number;
  category: string;
}

interface AIInsight {
  id: string;
  type: 'paper' | 'user' | 'topic' | 'insight';
  title: string;
  description: string;
  confidence: number;
  actionText?: string;
  actionUrl?: string;
}

const AIRecommendations: React.FC<AIRecommendationProps> = ({
  className = ""
}) => {
  const [refreshing, setRefreshing] = useState(false);
  const [activeInsight, setActiveInsight] = useState<string | null>(null);

  // Data hooks for context
  const { data: papers } = useExplorePapers({ page: 1 });
  const { data: savedPapers } = useMySavedPapers({ page: 1 });

  // Mock trending topics (in production, this would come from backend analytics)
  const trendingTopics: TrendingTopic[] = [
    { name: 'Black Holes', count: 47, growth: 23, category: 'Astrophysics' },
    { name: 'Exoplanets', count: 34, growth: 18, category: 'Planetary Science' },
    { name: 'Dark Matter', count: 28, growth: 15, category: 'Cosmology' },
    { name: 'Stellar Evolution', count: 22, growth: 12, category: 'Stellar Physics' },
    { name: 'Galaxy Formation', count: 19, growth: 8, category: 'Galactic Astronomy' }
  ];

  // Mock AI insights (in production, this would be generated by Murph AI)
  const aiInsights: AIInsight[] = [
    {
      id: '1',
      type: 'paper',
      title: 'Recommended Papers',
      description: 'Based on your interest in stellar evolution, I found 3 new papers about white dwarf formation.',
      confidence: 92,
      actionText: 'View Papers',
      actionUrl: '/explore?category=stellar'
    },
    {
      id: '2',
      type: 'user',
      title: 'Suggested Connections',
      description: 'Dr. Sarah Chen has published extensively on topics similar to your saved papers.',
      confidence: 87,
      actionText: 'View Profile',
      actionUrl: '/explore?tab=users'
    },
    {
      id: '3',
      type: 'topic',
      title: 'Trending Research',
      description: 'Gravitational wave astronomy is seeing a 45% increase in publications this month.',
      confidence: 95,
      actionText: 'Explore Topic'
    },
    {
      id: '4',
      type: 'insight',
      title: 'Reading Progress',
      description: `You've saved ${savedPapers?.count || 0} papers. Consider setting reading goals to stay on track.`,
      confidence: 100,
      actionText: 'Manage Library'
    }
  ];

  const handleRefresh = async () => {
    setRefreshing(true);
    // Simulate AI thinking time
    await new Promise(resolve => setTimeout(resolve, 2000));
    setRefreshing(false);
  };

  const getInsightIcon = (type: string) => {
    switch (type) {
      case 'paper': return BookOpen;
      case 'user': return Users;
      case 'topic': return TrendingUp;
      case 'insight': return Lightbulb;
      default: return Sparkles;
    }
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 90) return 'text-green-600 dark:text-green-400';
    if (confidence >= 70) return 'text-yellow-600 dark:text-yellow-400';
    return 'text-red-600 dark:text-red-400';
  };

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Sparkles className="w-5 h-5 text-indigo-500" />
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
            AI Insights
          </h3>
        </div>
        
        <button
          onClick={handleRefresh}
          disabled={refreshing}
          className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors disabled:opacity-50"
        >
          <RefreshCw className={`w-4 h-4 text-gray-500 ${refreshing ? 'animate-spin' : ''}`} />
        </button>
      </div>

      {/* Trending Topics */}
      <div className="bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-950/30 dark:to-purple-950/30 rounded-lg p-4 border border-indigo-200/50 dark:border-indigo-800/50">
        <h4 className="font-medium text-gray-900 dark:text-white mb-3 flex items-center gap-2">
          <TrendingUp className="w-4 h-4 text-indigo-500" />
          Trending Topics
        </h4>
        <div className="space-y-2">
          {trendingTopics.slice(0, 3).map((topic, index) => (
            <motion.div
              key={topic.name}
              initial={{ opacity: 0, x: -10 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
              className="flex items-center justify-between group cursor-pointer hover:bg-white/50 dark:hover:bg-gray-800/50 rounded-lg p-2 transition-colors"
            >
              <div className="flex items-center gap-3">
                <span className="w-6 h-6 bg-indigo-100 dark:bg-indigo-900/50 text-indigo-600 dark:text-indigo-400 rounded-full text-xs font-bold flex items-center justify-center">
                  {index + 1}
                </span>
                <div>
                  <span className="text-sm font-medium text-gray-900 dark:text-white block">
                    {topic.name}
                  </span>
                  <span className="text-xs text-gray-500 dark:text-gray-400">
                    {topic.count} papers
                  </span>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <span className="text-xs text-green-600 dark:text-green-400 font-medium">
                  +{topic.growth}%
                </span>
                <ChevronRight className="w-3 h-3 text-gray-400 group-hover:text-gray-600 transition-colors" />
              </div>
            </motion.div>
          ))}
        </div>
      </div>

      {/* AI Insights */}
      <div className="space-y-3">
        {aiInsights.map((insight, index) => {
          const Icon = getInsightIcon(insight.type);
          const isActive = activeInsight === insight.id;
          
          return (
            <motion.div
              key={insight.id}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className={`bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 hover:shadow-md transition-all cursor-pointer ${
                isActive ? 'ring-2 ring-indigo-500 ring-opacity-50' : ''
              }`}
              onClick={() => setActiveInsight(isActive ? null : insight.id)}
            >
              <div className="flex items-start gap-3">
                <div className="p-2 bg-gray-50 dark:bg-gray-700 rounded-lg">
                  <Icon className="w-4 h-4 text-gray-600 dark:text-gray-400" />
                </div>
                
                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between mb-1">
                    <h5 className="text-sm font-medium text-gray-900 dark:text-white">
                      {insight.title}
                    </h5>
                    <div className="flex items-center gap-1">
                      <Star className={`w-3 h-3 ${getConfidenceColor(insight.confidence)}`} />
                      <span className={`text-xs font-medium ${getConfidenceColor(insight.confidence)}`}>
                        {insight.confidence}%
                      </span>
                    </div>
                  </div>
                  
                  <p className="text-xs text-gray-600 dark:text-gray-300 leading-relaxed mb-2">
                    {insight.description}
                  </p>
                  
                  {insight.actionText && (
                    <button
                      className="text-xs text-indigo-600 dark:text-indigo-400 hover:text-indigo-700 dark:hover:text-indigo-300 font-medium flex items-center gap-1 transition-colors"
                      onClick={(e) => {
                        e.stopPropagation();
                        // Handle action click
                        console.log('Action clicked:', insight.actionUrl);
                      }}
                    >
                      {insight.actionText}
                      <ChevronRight className="w-3 h-3" />
                    </button>
                  )}
                </div>
              </div>
            </motion.div>
          );
        })}
      </div>

      {/* Quick Stats */}
      <div className="bg-gradient-to-r from-emerald-50 to-teal-50 dark:from-emerald-950/30 dark:to-teal-950/30 rounded-lg p-4 border border-emerald-200/50 dark:border-emerald-800/50">
        <h4 className="font-medium text-gray-900 dark:text-white mb-3">
          Your Activity
        </h4>
        <div className="grid grid-cols-2 gap-4">
          <div className="text-center">
            <div className="text-lg font-bold text-emerald-600 dark:text-emerald-400">
              {savedPapers?.count || 0}
            </div>
            <div className="text-xs text-gray-600 dark:text-gray-300">
              Saved Papers
            </div>
          </div>
          <div className="text-center">
            <div className="text-lg font-bold text-teal-600 dark:text-teal-400">
              {papers?.count || 0}
            </div>
            <div className="text-xs text-gray-600 dark:text-gray-300">
              Available Papers
            </div>
          </div>
        </div>
      </div>

      {/* Murph AI Chat Prompt */}
      <div className="bg-gradient-to-r from-orange-50 to-red-50 dark:from-orange-950/30 dark:to-red-950/30 rounded-lg p-4 border border-orange-200/50 dark:border-orange-800/50">
        <div className="flex items-center gap-2 mb-2">
          <div className="w-6 h-6 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
            <span className="text-white text-xs font-bold">M</span>
          </div>
          <h4 className="font-medium text-gray-900 dark:text-white">
            Ask Murph AI
          </h4>
        </div>
        <p className="text-sm text-gray-600 dark:text-gray-300 mb-3">
          Get personalized research recommendations and paper summaries
        </p>
        <button
          onClick={() => {
            // Navigate to Murph AI with context
            window.location.href = '/murphai?context=explore';
          }}
          className="w-full px-3 py-2 bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-lg hover:from-orange-600 hover:to-red-600 transition-all text-sm font-medium"
        >
          Chat with Murph
        </button>
      </div>
    </div>
  );
};

export default AIRecommendations;