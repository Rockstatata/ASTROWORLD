# Generated by Django 5.2.6 on 2025-10-21 17:58

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SkyMarker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the celestial object', max_length=200)),
                ('object_type', models.CharField(choices=[('star', 'Star'), ('planet', 'Planet'), ('moon', 'Moon'), ('constellation', 'Constellation'), ('galaxy', 'Galaxy'), ('nebula', 'Nebula'), ('cluster', 'Star Cluster'), ('asteroid', 'Asteroid'), ('comet', 'Comet'), ('satellite', 'Satellite'), ('iss', 'International Space Station'), ('deep_sky', 'Deep Sky Object'), ('other', 'Other')], default='other', max_length=50)),
                ('object_id', models.CharField(blank=True, help_text='Stellarium object ID or designation', max_length=200, null=True)),
                ('ra', models.FloatField(help_text='Right Ascension in degrees (0-360)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('dec', models.FloatField(help_text='Declination in degrees (-90 to +90)', validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('alt', models.FloatField(blank=True, help_text='Altitude in degrees (horizon coordinates)', null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('az', models.FloatField(blank=True, help_text='Azimuth in degrees (horizon coordinates)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('notes', models.TextField(blank=True, help_text="User's personal notes about this object", null=True)),
                ('custom_name', models.CharField(blank=True, help_text="User's custom name for this object", max_length=200, null=True)),
                ('is_tracking', models.BooleanField(default=False, help_text='Whether user is actively tracking this object')),
                ('tracking_start_date', models.DateTimeField(blank=True, null=True)),
                ('next_observation_date', models.DateTimeField(blank=True, null=True)),
                ('magnitude', models.FloatField(blank=True, help_text='Visual magnitude of the object', null=True)),
                ('visibility_rating', models.IntegerField(blank=True, help_text="User's visibility rating (1-5 stars)", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('ai_description', models.TextField(blank=True, help_text='AI-generated description from Murph', null=True)),
                ('ai_generated_at', models.DateTimeField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, default=list, help_text='User-defined tags')),
                ('color', models.CharField(default='#ffffff', help_text='Hex color for marker display', max_length=7)),
                ('is_public', models.BooleanField(default=False, help_text='Whether other users can see this marker')),
                ('is_featured', models.BooleanField(default=False, help_text='Featured by admins for discovery')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sky_markers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sky_markers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MarkerShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discovery_source', models.CharField(choices=[('explore', 'Explore Page'), ('search', 'Search Results'), ('profile', 'User Profile'), ('recommendation', 'AI Recommendation'), ('social', 'Social Feed')], default='explore', max_length=50)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('copied_to_own', models.BooleanField(default=False, help_text='User copied this marker to their own collection')),
                ('copied_at', models.DateTimeField(blank=True, null=True)),
                ('rating', models.IntegerField(blank=True, help_text="User's rating of this shared marker", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('discovered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discovered_markers', to=settings.AUTH_USER_MODEL)),
                ('shared_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_markers', to=settings.AUTH_USER_MODEL)),
                ('marker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='skymap.skymarker')),
            ],
            options={
                'db_table': 'marker_shares',
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='MarkerObservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_type', models.CharField(choices=[('visual', 'Visual Observation'), ('photo', 'Photographic'), ('sketch', 'Sketch/Drawing'), ('note', 'Notes Only')], default='visual', max_length=20)),
                ('observation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('duration_minutes', models.IntegerField(blank=True, help_text='Observation duration in minutes', null=True)),
                ('seeing_conditions', models.IntegerField(blank=True, choices=[(1, 'Poor (1/5)'), (2, 'Fair (2/5)'), (3, 'Good (3/5)'), (4, 'Very Good (4/5)'), (5, 'Excellent (5/5)')], null=True)),
                ('weather_notes', models.TextField(blank=True, help_text='Weather and atmospheric conditions', null=True)),
                ('equipment', models.JSONField(blank=True, default=dict, help_text='Telescope, binoculars, camera, etc. {type, model, magnification, aperture}')),
                ('notes', models.TextField(help_text='Detailed observation notes')),
                ('sketch_image', models.TextField(blank=True, help_text='URL to sketch or drawing', null=True)),
                ('photo_image', models.TextField(blank=True, help_text='URL to photograph', null=True)),
                ('location', models.JSONField(blank=True, help_text='Observation location {lat, lon, elevation, city, light_pollution}', null=True)),
                ('is_public', models.BooleanField(default=False, help_text='Share this observation publicly')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sky_observations', to=settings.AUTH_USER_MODEL)),
                ('marker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='skymap.skymarker')),
            ],
            options={
                'db_table': 'marker_observations',
                'ordering': ['-observation_date'],
            },
        ),
        migrations.CreateModel(
            name='SkyView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Name for this saved view', max_length=200)),
                ('description', models.TextField(blank=True, help_text="Description of what's visible in this view", null=True)),
                ('preset_type', models.CharField(choices=[('custom', 'Custom View'), ('constellation', 'Constellation View'), ('planet', 'Planet View'), ('deep_sky', 'Deep Sky View'), ('solar_system', 'Solar System View'), ('milky_way', 'Milky Way View'), ('meteor_shower', 'Meteor Shower View'), ('eclipse', 'Eclipse View')], default='custom', max_length=50)),
                ('ra_center', models.FloatField(help_text='Center Right Ascension in degrees', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('dec_center', models.FloatField(help_text='Center Declination in degrees', validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('zoom_level', models.FloatField(default=1.0, help_text='Zoom level (field of view)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(100.0)])),
                ('stellarium_settings', models.JSONField(blank=True, default=dict, help_text='Specific Stellarium view settings (atmosphere, grids, etc.)')),
                ('observation_time', models.DateTimeField(blank=True, help_text='Specific time for this view (optional)', null=True)),
                ('location', models.JSONField(blank=True, help_text='Geographic location for this view {lat, lon, city, timezone}', null=True)),
                ('is_public', models.BooleanField(default=False, help_text='Whether other users can load this view')),
                ('is_featured', models.BooleanField(default=False, help_text='Featured view for discovery')),
                ('load_count', models.IntegerField(default=0, help_text='How many times this view has been loaded')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for categorization')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('featured_markers', models.ManyToManyField(blank=True, help_text='Markers that are highlighted in this view', related_name='featured_in_views', to='skymap.skymarker')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sky_views', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sky_views',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.AddIndex(
            model_name='skymarker',
            index=models.Index(fields=['user', 'is_tracking'], name='sky_markers_user_id_7e4389_idx'),
        ),
        migrations.AddIndex(
            model_name='skymarker',
            index=models.Index(fields=['user', 'is_public'], name='sky_markers_user_id_2623b6_idx'),
        ),
        migrations.AddIndex(
            model_name='skymarker',
            index=models.Index(fields=['object_type'], name='sky_markers_object__b70ff1_idx'),
        ),
        migrations.AddIndex(
            model_name='skymarker',
            index=models.Index(fields=['ra', 'dec'], name='sky_markers_ra_fc279a_idx'),
        ),
        migrations.AddIndex(
            model_name='skymarker',
            index=models.Index(fields=['is_public', 'is_featured'], name='sky_markers_is_publ_a95e3f_idx'),
        ),
        migrations.AddIndex(
            model_name='skymarker',
            index=models.Index(fields=['created_at'], name='sky_markers_created_1b85aa_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='skymarker',
            unique_together={('user', 'object_id')},
        ),
        migrations.AddIndex(
            model_name='markershare',
            index=models.Index(fields=['shared_by', 'viewed_at'], name='marker_shar_shared__29c657_idx'),
        ),
        migrations.AddIndex(
            model_name='markershare',
            index=models.Index(fields=['discovered_by', 'viewed_at'], name='marker_shar_discove_c9d8d4_idx'),
        ),
        migrations.AddIndex(
            model_name='markershare',
            index=models.Index(fields=['marker', 'discovery_source'], name='marker_shar_marker__76e83b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='markershare',
            unique_together={('marker', 'discovered_by')},
        ),
        migrations.AddIndex(
            model_name='markerobservation',
            index=models.Index(fields=['marker', 'observation_date'], name='marker_obse_marker__2f86d4_idx'),
        ),
        migrations.AddIndex(
            model_name='markerobservation',
            index=models.Index(fields=['user', 'observation_date'], name='marker_obse_user_id_07cd5a_idx'),
        ),
        migrations.AddIndex(
            model_name='markerobservation',
            index=models.Index(fields=['observation_date'], name='marker_obse_observa_09bbfd_idx'),
        ),
        migrations.AddIndex(
            model_name='markerobservation',
            index=models.Index(fields=['is_public'], name='marker_obse_is_publ_dd724f_idx'),
        ),
        migrations.AddIndex(
            model_name='skyview',
            index=models.Index(fields=['user', 'preset_type'], name='sky_views_user_id_5266ce_idx'),
        ),
        migrations.AddIndex(
            model_name='skyview',
            index=models.Index(fields=['user', 'is_public'], name='sky_views_user_id_a5a1b4_idx'),
        ),
        migrations.AddIndex(
            model_name='skyview',
            index=models.Index(fields=['is_public', 'is_featured'], name='sky_views_is_publ_17521f_idx'),
        ),
        migrations.AddIndex(
            model_name='skyview',
            index=models.Index(fields=['preset_type'], name='sky_views_preset__df2828_idx'),
        ),
        migrations.AddIndex(
            model_name='skyview',
            index=models.Index(fields=['load_count'], name='sky_views_load_co_47495a_idx'),
        ),
        migrations.AddIndex(
            model_name='skyview',
            index=models.Index(fields=['created_at'], name='sky_views_created_ecefbe_idx'),
        ),
    ]
