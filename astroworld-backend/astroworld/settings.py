"""
Django settings for astroworld project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-h3isq23egf_gojs7@^ztkxhx@68a(%#x-v4x0of*=5r@-%q4dk'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
     'rest_framework',
    'corsheaders',
    'users',
    'nasa_api',
    'spacex_api',
    'murphai',
    'spaceflightnews',
    'research_papers',
    'skymap',
    'rest_framework_simplejwt.token_blacklist', 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'astroworld.urls'

NASA_API_KEY = os.getenv('NASA_API_KEY')

GROQ_API_KEY = os.getenv("GROQ_API_KEY")

CORS_ALLOWED_ORIGINS = ["http://localhost:5173"]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

AUTH_USER_MODEL = 'users.User'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Celery Configuration
USE_CELERY = os.getenv('USE_CELERY', 'False').lower() == 'true'
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

if USE_CELERY:
    try:
        from celery.schedules import crontab
        CELERY_BEAT_SCHEDULE = {
            'sync-daily-nasa-data': {
                'task': 'nasa_api.tasks.sync_daily_nasa_data',
                'schedule': crontab(hour=2, minute=0),  # 2 AM daily
            },
            'sync-weekly-nasa-data': {
                'task': 'nasa_api.tasks.sync_weekly_nasa_data',
                'schedule': crontab(hour=3, minute=0, day_of_week=0),  # 3 AM Sundays
            },
            'send-neo-alerts': {
                'task': 'nasa_api.tasks.send_neo_alerts',
                'schedule': crontab(hour=9, minute=0),  # 9 AM daily
            },
            'cleanup-old-data': {
                'task': 'nasa_api.tasks.cleanup_old_data',
                'schedule': crontab(hour=4, minute=0, day_of_week=0),  # 4 AM Sundays
            },
            # Spaceflight News tasks
            'sync-daily-spaceflight-news': {
                'task': 'spaceflightnews.tasks.sync_daily_spaceflight_news',
                'schedule': crontab(hour=1, minute=30),  # 1:30 AM daily
            },
            'sync-weekly-spaceflight-news': {
                'task': 'spaceflightnews.tasks.sync_weekly_spaceflight_news',
                'schedule': crontab(hour=1, minute=0, day_of_week=1),  # 1 AM Mondays
            },
            # Research Papers tasks
            'sync-daily-research-papers': {
                'task': 'research_papers.tasks.sync_daily_research_papers',
                'schedule': crontab(hour=5, minute=0),  # 5 AM daily
            },
            'sync-weekly-research-papers': {
                'task': 'research_papers.tasks.sync_weekly_research_papers',
                'schedule': crontab(hour=5, minute=30, day_of_week=0),  # 5:30 AM Sundays
            },
        }
    except ImportError:
        pass  # Celery not installed

# Email settings for notifications
# Use console backend for development if EMAIL_HOST_USER is not set
if os.getenv('EMAIL_HOST_USER') and os.getenv('EMAIL_HOST_USER') != 'your-email@gmail.com':
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    print(f"SMTP Email configured for: {EMAIL_HOST_USER}")
else:
    # For development - emails will be printed to console
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    print("Using console email backend - emails will be printed to terminal")

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'nasa_api.log',
        },
    },
    'loggers': {
        'nasa_api': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@astroworld.dev')
FRONTEND_URL = 'http://localhost:5173'  # Add to env vars later

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'astroworld.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'astroworld',
        'USER': 'postgres',
        'PASSWORD': '3106',
        'HOST': 'localhost',  # Or your PostgreSQL host
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Cache configuration (for API rate limiting)
# Using LocMemCache for development (no Redis needed)
# For production, consider installing Redis: pip install redis django-redis
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'astroworld-cache',
        'OPTIONS': {
            'MAX_ENTRIES': 1000,  # Maximum number of cache entries
        }
    }
}

# Production Redis configuration (commented out):
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.redis.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/1',
#     }
# }